version: "3.0"
name: "Storyline-Driven Progressive Development Workflow"
description: "Stage-based process with storyline-driven feature development"

# ═══════════════════════════════════════════════════════════════
#                     CORE PHILOSOPHY
# ═══════════════════════════════════════════════════════════════
philosophy: |
  STAGES = Development Process (HOW we build) - 8 sequential phases
  STORYLINES = User Features (WHAT we build) - Complete user journeys
  
  Each STORYLINE flows through multiple STAGES
  Each STAGE processes multiple STORYLINES progressively
  
  Example: "User Authentication" storyline goes through:
  Planning → Development → Testing → Integration → Deployment

# ═══════════════════════════════════════════════════════════════
#                  EXECUTION INSTRUCTIONS
# ═══════════════════════════════════════════════════════════════
execution_entry: |
  When user says "按照workflow开发[项目]":
  
  1. COORDINATOR ACTIVATION:
     - READ .claude/agents/coordinator.md for orchestration guidance
     - Main Claude becomes orchestrator (NOT a subagent)
     - Use Task tool to delegate to specialist agents
  
  2. MODE DETECTION:
     Check project state using LS and Glob:
     - No existing code → INITIAL MODE (full 8 stages)
     - Existing project → ITERATIVE MODE (smart stages)
  
  3. AUTOMATIC PROGRESSION:
     - Stage validated → Next stage automatically
     - Storyline complete → Next storyline automatically
     - NO "Should I continue?" questions

task_tool_usage: |
  CRITICAL: How to use Task tool correctly:
  
  Task(
    subagent_type="general-purpose",
    description="Short task description",
    prompt="You are a [role]. Read .claude/agents/[role].md for your guidelines.
            [Specific instructions for this task including storyline context]"
  )
  
  REMEMBER:
  - Each Task creates isolated context window
  - Subagents cannot call other subagents (no nested Task)
  - Include storyline context in every Task prompt
  - Subagents return results to main Claude
  
  PARALLEL EXECUTION:
  - To execute in parallel: Call multiple Task tools in ONE message
  - Example: Task(...) Task(...) in the same response
  - If called in separate messages, they execute sequentially
  - Claude Code supports batch tool calls in single message

# ═══════════════════════════════════════════════════════════════
#              MODE A: INITIAL DEVELOPMENT
# ═══════════════════════════════════════════════════════════════
initial_mode:
  trigger: "No existing project files (no package.json, src/, etc.)"
  
  stages:
    # ─────────────────────────────────────────────────────────
    stage_0:
      name: "Requirements Discovery"
      type: "conversation"
      description: "Main Claude conducts dialogue (NOT delegated to agent)"
      
      conversation_points:
        - "What are you building? (purpose)"
        - "Who are the target users?"
        - "Core features for MVP?"
        - "Technical preferences?"
        - "是面向C端还是B端？需要移动端吗？"
      
      exit: "User confirms: 需求清楚了"
      output: "Requirements understood (kept in context for Stage 1)"
    
    # ─────────────────────────────────────────────────────────
    stage_1:
      name: "Planning & Storyline Generation"
      type: "mixed_execution"
      description: "Architecture design and storyline breakdown"
      
      task_execution:
        1_requirements:
          agent: "requirements-analyst"
          action: "Task tool: Analyze requirements and create docs/requirements.md"
          execution: "FIRST (needed by others)"
          
        2_parallel_design:  # MUST run simultaneously
          execution_instruction: |
            CRITICAL: Call BOTH Tasks in ONE message:
            Task(architect...) Task(ux...) 
            NOT in separate messages!
            
          technical_architecture:
            agent: "technical-architect"
            action: "Task tool: Design architecture, create docs/architecture.md and docs/api-spec.yaml"
            
          ux_design:
            agent: "ux-designer"
            action: "Task tool: Create UX design, output docs/ux-design.md and docs/component-specs.md"
          
        3_storyline_generation:  # CRITICAL - needs all above
          agent: "project-manager"
          action: "Task tool: Generate storyline breakdown with dependency graph"
          execution: "AFTER parallel_design completes"
          inputs_needed:
            - "docs/requirements.md"
            - "docs/architecture.md"
            - "docs/ux-design.md"
          outputs:
            - ".claude/storylines/storyline-breakdown.json"
            - ".claude/storylines/*/progress.md for each storyline"
          details: |
            - Complete user storylines (e.g., 'user auth', 'shopping cart')
            - Dependency graph showing priority layers
            - Time estimates per storyline
            - ASCII visualization of dependencies
          
          example_output: |
            Priority 1 (Foundation):
            ├─ User Authentication (3 days)
            ├─ Product Browsing (2 days)
            └─ Static Pages (1 day)
            
            Priority 2 (Needs P1):
            ├─ Shopping Cart (2 days)
            └─ Order Management (2 days)
            
            Priority 3 (Needs P2):
            └─ Checkout Process (3 days)
      
      approval_gate:
        trigger: "After storyline generation"
        present: "ASCII dependency graph"
        require: "User approval: 'Storylines look good, proceed'"
    
    # ─────────────────────────────────────────────────────────
    stage_2:
      name: "Project Setup"
      type: "initialization"
      description: "Setup project structure based on architecture"
      
      execution:
        action: "Read architecture.md and initialize accordingly"
        principle: "Create structure defined in architecture document"
        scope:
          - "Directory structure as per architecture"
          - "Configuration files (package.json, etc.)"
          - "Empty entry points (no implementation)"
          - "Database schemas if specified"
          - "Docker setup if specified"
      
      validation: "All components from architecture.md have skeleton structure"
    
    # ─────────────────────────────────────────────────────────
    stage_3:
      name: "Storyline Development"
      type: "storyline_driven"
      description: "Develop storylines layer by layer"
      
      execution_pattern: |
        FOR each priority_layer IN [1, 2, 3]:
          FOR each storyline IN priority_layer:
            IF dependencies_satisfied(storyline):
              develop_storyline(storyline)
      
      per_storyline_flow:
        1_backend:
          agent: "backend-developer"
          action: "Task tool: Implement complete backend for {storyline}"
          includes: "API endpoints, business logic, data models"
          
        2_frontend:
          agent: "frontend-developer"
          action: "Task tool: Implement complete UI for {storyline}"
          includes: "All screens, interactions, state management"
          
        3_validation:
          agent: "qa-engineer"
          action: "Task tool: E2E test entire {storyline} user journey"
          gate: "Must pass ALL tests before next storyline"
      
      progression_rules:
        - "P1 storylines can run in parallel (no deps)"
        - "P2 waits for required P1 storylines"
        - "P3 waits for required P2 storylines"
        - "Failed validation = fix before continuing"
    
    # ─────────────────────────────────────────────────────────
    stage_4:
      name: "Integration Testing"
      type: "validation"
      activities:
        - "Test cross-storyline interactions"
        - "Validate data flow between features"
        - "Performance testing"
        - "Security validation"
    
    # ─────────────────────────────────────────────────────────
    stage_5_6_7:
      name: "Production Preparation"
      
      stage_5_integration:
        - "Final system integration"
        - "Performance optimization"
        
      stage_6_documentation:
        - "User guides per storyline"
        - "API documentation"
        - "Deployment guides"
        
      stage_7_deployment:
        - "Docker containerization"
        - "CI/CD setup"
        - "Production config"

# ═══════════════════════════════════════════════════════════════
#              MODE B: ITERATIVE DEVELOPMENT
# ═══════════════════════════════════════════════════════════════
iterative_mode:
  trigger: "Existing project detected (has package.json, src/, etc.)"
  
  smart_stages:
    # ─────────────────────────────────────────────────────────
    stage_0:
      name: "Change Requirements"
      type: "conversation"
      focus: "What new features or changes needed?"
      skip: "Don't re-analyze entire system"
    
    # ─────────────────────────────────────────────────────────
    stage_1:
      name: "Impact Analysis"
      type: "smart_analysis"
      
      analysis:
        - "Which existing modules affected?"
        - "New storylines vs modifications?"
        - "Dependency impacts?"
      
      decision_tree: |
        IF affected_modules < 3:
          → SIMPLE MODE (sequential development)
        ELSE IF affected_modules ≥ 3:
          IF no_dependencies:
            → PARALLEL MODE (develop simultaneously)
          ELSE:
            → LAYERED MODE (by dependency order)
      
      storyline_update:
        - "Add new storylines to dependency graph"
        - "Mark modified storylines"
        - "Keep completed storylines stable"
    
    # ─────────────────────────────────────────────────────────
    stage_2_3:
      name: "Incremental Development"
      type: "targeted_changes"
      
      principles:
        - "NEVER rebuild unchanged modules"
        - "Preserve all working code"
        - "Add new storylines to appropriate priority layer"
        - "Run regression tests on affected paths"
      
      new_storyline_flow:
        - "Place in correct priority layer"
        - "Develop following same per-storyline flow"
        - "Integrate with existing storylines"
      
      modified_storyline_flow:
        - "Update specific components only"
        - "Regression test entire storyline"
        - "Verify downstream storylines still work"
    
    # ─────────────────────────────────────────────────────────
    stage_4_5_6_7:
      name: "Incremental Integration"
      
      optimizations:
        - "Test only affected storyline paths"
        - "Update only changed documentation"
        - "Hot reload where possible"
        - "Incremental deployment"

# ═══════════════════════════════════════════════════════════════
#                    STORYLINE EXAMPLES
# ═══════════════════════════════════════════════════════════════
storyline_structure:
  definition: |
    A storyline is a COMPLETE user journey, not technical tasks:
    ✅ "User browses and purchases products" (full flow)
    ❌ "Create product API endpoint" (technical fragment)
  
  example_storylines:
    user_authentication:
      description: "Complete identity management flow"
      components:
        - "Registration + email verification"
        - "Login/logout with sessions"
        - "Password reset flow"
        - "Profile management"
      vertical_slice: "UI + API + Database + Sessions"
      priority: 1
      dependencies: []
    
    shopping_cart:
      description: "Product selection and management"
      components:
        - "Add/remove items"
        - "Update quantities"
        - "Calculate totals"
        - "Persist across sessions"
      vertical_slice: "UI + API + State + Storage"
      priority: 2
      dependencies: ["product_browsing"]
    
    checkout:
      description: "Complete purchase flow"
      components:
        - "Shipping address"
        - "Payment processing"
        - "Order confirmation"
      vertical_slice: "UI + API + Payment Gateway + Orders"
      priority: 3
      dependencies: ["shopping_cart", "user_authentication"]

# ═══════════════════════════════════════════════════════════════
#                   AUTOMATION RULES
# ═══════════════════════════════════════════════════════════════
automation:
  continuous_flow:
    - "Stage complete → Next stage automatically"
    - "Storyline validated → Next storyline automatically"
    - "NO 'Should I continue?' or 'Would you like me to proceed?'"
    - "Only pause for: Requirements, Storyline approval, Deployment"
  
  validation_recovery:
    temporary_test_patterns: ["simple-*", "test-*", "minimal-*", "poc-*"]
    protocol: |
      1. Create temp validation file
      2. Test hypothesis
      3. Apply fix to ORIGINAL code
      4. DELETE temp file
      5. Continue with full implementation
    warning: "Never stop at temporary test success"
  
  problem_handling:
    minor: "Auto-fix and continue (syntax, imports)"
    medium: "Analyze, fix, retry up to 3 times"
    major: "Generate report, need human help"

# ═══════════════════════════════════════════════════════════════
#                    STATE TRACKING
# ═══════════════════════════════════════════════════════════════
state_management:
  storyline_tracking:
    directory: ".claude/storylines/{storyline_id}/"
    files:
      - "progress.md - Component completion status"
      - "tests.md - Test results"
      - "dependencies.json - Upstream/downstream storylines"
  
  stage_tracking:
    current: "Track in conversation context"
    completed: "List of completed stages"
    next: "Automatically determined from current"
  
  progress_visibility: |
    After each storyline component:
    - Update progress file
    - Show completion percentage
    - List remaining work

# ═══════════════════════════════════════════════════════════════
#                   QUICK REFERENCE
# ═══════════════════════════════════════════════════════════════
quick_guide: |
  INITIAL PROJECT EXAMPLE:
  User: "按照workflow开发[项目]"
  
  Claude executes:
  Stage 0: Conversation to understand requirements
  
  Stage 1: [Generate plans and storylines]
          → Task(requirements-analyst): Create requirements doc
          → Task(architect) + Task(ux): Parallel design docs
          → Task(project-manager): Generate storyline breakdown
            (Will create priority layers based on dependencies)
  User: Reviews storylines → "Proceed"
  
  Stage 2-3: [For each storyline]
            → Task(backend-dev): API implementation
            → Task(frontend-dev): UI implementation
            → Task(qa): E2E testing
            Auto-progress: P1 complete → Start P2
  
  Stage 4-7: Integration → Docs → Deploy
  
  ─────────────────────────────────────
  
  ITERATIVE PROJECT EXAMPLE:
  User: "添加[新功能]到现有系统"
  
  Claude executes:
  Detect: Has package.json → ITERATIVE MODE
  
  Stage 0: Understand new requirements
  
  Stage 1: Impact analysis:
          - Identify affected modules
          - Determine integration points
          - Add new storyline to appropriate layer
  
  Stage 2-3: Incremental development
            - Implement new functionality
            - Test integration
            - Regression testing
  
  Stage 4-7: Incremental deploy only
  
  ─────────────────────────────────────
  
  KEY SUCCESS FACTORS:
  • Coordinator reads guidance, not invoked as subagent
  • Each storyline = complete user journey
  • Task tool creates isolated contexts
  • Automatic progression after validation
  • Track progress in .claude/storylines/