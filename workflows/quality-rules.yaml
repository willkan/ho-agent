# Comprehensive Quality Rules and Validation Configuration
version: "2.0"
name: "Multi-Layer Quality Validation System"
description: "Progressive quality validation with automated enforcement and human oversight"

# Quality dimensions and their weights
quality_dimensions:
  functional_quality:
    weight: 40
    description: "Does the software do what it's supposed to do?"
    
  technical_quality:
    weight: 30
    description: "Is the code maintainable, performant, and secure?"
    
  user_experience_quality:
    weight: 20
    description: "Is it usable, accessible, and delightful?"
    
  process_quality:
    weight: 10
    description: "Was it built following good practices?"

# Multi-layer validation framework
validation_layers:
  # Layer 1: Unit Level
  unit_validation:
    scope: "single_component"
    frequency: "per_component"
    automated: true
    
    rules:
      - name: "unit_test_coverage"
        type: "coverage"
        threshold: 80
        severity: "warning"
        measurement: "percentage"
        command: "npm run test:coverage"
        
      - name: "unit_test_pass_rate"
        type: "test_success"
        threshold: 100
        severity: "critical"
        measurement: "percentage"
        command: "npm run test:unit"
        
      - name: "code_complexity"
        type: "static_analysis"
        threshold: 10
        severity: "warning"
        measurement: "cyclomatic_complexity"
        command: "npm run lint:complexity"
        
      - name: "linting_compliance"
        type: "static_analysis"
        threshold: 0
        severity: "error"
        measurement: "violations_count"
        command: "npm run lint"

  # Layer 2: Contract Level (New!)
  contract_validation:
    scope: "interface_compatibility"
    frequency: "per_module"
    automated: true
    agent_responsible: "coordinator"
    
    rules:
      - name: "api_schema_consistency"
        type: "schema_validation"
        description: "Frontend expectations match backend API contracts"
        severity: "critical"
        checks:
          - "request_payload_schema_match"
          - "response_payload_schema_match"
          - "http_status_codes_consistency"
          - "error_message_format_consistency"
        
      - name: "data_type_compatibility"
        type: "type_validation"
        description: "Data types are consistent across system boundaries"
        severity: "critical"
        checks:
          - "database_to_api_type_consistency"
          - "api_to_frontend_type_consistency"
          - "enum_values_consistency"
          
      - name: "interface_versioning"
        type: "versioning_check"
        description: "Breaking changes are properly versioned"
        severity: "error"
        checks:
          - "no_breaking_changes_without_version_bump"
          - "deprecated_endpoints_properly_marked"

  # Layer 3: Integration Level
  integration_validation:
    scope: "cross_module"
    frequency: "per_module_completion"
    automated: true
    
    rules:
      - name: "api_integration_tests"
        type: "integration_test"
        threshold: 95
        severity: "critical"
        measurement: "pass_rate"
        command: "npm run test:integration"
        
      - name: "data_flow_validation"
        type: "data_flow_test"
        description: "Data flows correctly through the entire stack"
        severity: "critical"
        checks:
          - "database_to_api_data_integrity"
          - "api_to_frontend_data_integrity"
          - "error_propagation_consistency"
          
      - name: "performance_integration"
        type: "performance_test"
        thresholds:
          response_time: 2000  # ms
          throughput: 100      # requests/second
        severity: "warning"
        command: "npm run test:performance"

  # Layer 4: System Level  
  system_validation:
    scope: "end_to_end"
    frequency: "per_stage_completion"
    automated: true
    
    rules:
      - name: "user_workflow_tests"
        type: "e2e_test"
        threshold: 100
        severity: "critical"
        measurement: "pass_rate"
        command: "npm run test:e2e"
        
      - name: "cross_browser_compatibility"
        type: "compatibility_test"
        browsers: ["chrome", "firefox", "safari", "edge"]
        threshold: 100
        severity: "error"
        
      - name: "accessibility_compliance"
        type: "accessibility_test"
        standard: "WCAG_2.1_AA"
        threshold: 95
        severity: "warning"
        command: "npm run test:a11y"
        
      - name: "security_vulnerability_scan"
        type: "security_test"
        tools: ["snyk", "npm audit"]
        severity_thresholds:
          critical: 0
          high: 0
          medium: 5
        command: "npm audit && snyk test"

# Quality gates and enforcement
quality_gates:
  # Gate 1: Code Quality Gate
  code_quality_gate:
    trigger: "before_code_review"
    required_validations: ["unit_validation"]
    blocking_conditions:
      - "linting_compliance.violations > 0"
      - "unit_test_pass_rate < 100"
    warning_conditions:
      - "unit_test_coverage < 80"
      - "code_complexity > 10"
    actions:
      block: "prevent_code_review"
      warn: "notify_developer"

  # Gate 2: Module Quality Gate  
  module_quality_gate:
    trigger: "after_module_completion"
    required_validations: ["unit_validation", "contract_validation", "integration_validation"]
    blocking_conditions:
      - "api_schema_consistency.status != 'pass'"
      - "api_integration_tests.pass_rate < 95"
      - "data_type_compatibility.status != 'pass'"
    warning_conditions:
      - "performance_integration.response_time > 1500"
      - "integration_validation.coverage < 85"
    actions:
      block: "prevent_next_module"
      warn: "create_technical_debt_ticket"

  # Gate 3: System Quality Gate
  system_quality_gate:
    trigger: "before_deployment"
    required_validations: ["system_validation"]
    blocking_conditions:
      - "user_workflow_tests.pass_rate < 100"
      - "security_vulnerability_scan.critical > 0"
      - "security_vulnerability_scan.high > 0"
    warning_conditions:
      - "accessibility_compliance < 95"
      - "cross_browser_compatibility < 100"
      - "performance_degradation > 20%"
    actions:
      block: "prevent_deployment"
      warn: "require_human_approval"

# Intelligent quality analysis
quality_analysis:
  trend_analysis:
    enabled: true
    metrics_tracked:
      - "test_coverage_trend"
      - "complexity_growth_rate"
      - "defect_density_trend"
      - "performance_trend"
    
    alert_conditions:
      - name: "quality_degradation"
        condition: "test_coverage_trend < -5% over 3 modules"
        action: "suggest_quality_sprint"
        
      - name: "complexity_explosion"
        condition: "complexity_growth_rate > 20% over 2 modules"
        action: "mandate_refactoring_sprint"
        
      - name: "performance_regression"
        condition: "response_time_trend > +30% over 2 modules"
        action: "performance_investigation_required"

  predictive_quality_scoring:
    enabled: true
    factors:
      - "historical_defect_patterns"
      - "code_complexity_metrics"
      - "team_velocity_trends"
      - "technical_debt_accumulation"
    
    predictions:
      - "likelihood_of_production_issues"
      - "estimated_maintenance_effort"
      - "predicted_performance_characteristics"

# Human intervention triggers
human_intervention_triggers:
  quality_related:
    mandatory:
      - condition: "critical_security_vulnerability_found"
        timeout: "2h"
        escalation: "security_team"
        
      - condition: "system_quality_gate_blocked_twice"
        timeout: "4h"
        context: "quality_analysis_report"
        
      - condition: "quality_trend_degradation > 30%"
        timeout: "12h"
        context: "trend_analysis_and_recommendations"
        
    recommended:
      - condition: "warning_threshold_exceeded_multiple_modules"
        auto_continue_after: "1h"
        context: "quality_summary_report"
        
      - condition: "performance_degradation > 20%"
        auto_continue_after: "30m"
        context: "performance_analysis_report"
        
      - condition: "accessibility_compliance < 90%"
        auto_continue_after: "2h"
        context: "accessibility_audit_report"

# Quality metrics and reporting
metrics_collection:
  automated_metrics:
    - name: "defect_detection_rate"
      calculation: "defects_found_in_validation / total_defects_in_production"
      target: "> 85%"
      
    - name: "validation_efficiency" 
      calculation: "validation_time / development_time"
      target: "< 20%"
      
    - name: "false_positive_rate"
      calculation: "false_alarms / total_quality_alerts"
      target: "< 15%"
      
    - name: "quality_gate_effectiveness"
      calculation: "production_issues_prevented / total_quality_gates_triggered"
      target: "> 70%"

  reporting_schedule:
    real_time_dashboard: "continuous"
    module_quality_report: "per_module_completion"
    sprint_quality_summary: "weekly"
    project_quality_retrospective: "project_completion"

# Tool configurations
quality_tools:
  static_analysis:
    javascript: 
      - tool: "eslint"
        config: ".eslintrc.json"
        rules: "airbnb-base"
      - tool: "sonarjs"
        config: "sonar-project.properties"
        
    python:
      - tool: "pylint"
        config: ".pylintrc"
      - tool: "bandit" 
        security_focus: true
        
    css:
      - tool: "stylelint"
        config: ".stylelintrc.json"

  testing_tools:
    unit_testing:
      javascript: ["jest", "mocha"]
      python: ["pytest", "unittest"]
      
    integration_testing:
      api: ["supertest", "postman"]
      database: ["testcontainers"]
      
    e2e_testing:
      web: ["playwright", "cypress"]
      mobile: ["appium"]

  security_tools:
    vulnerability_scanning: ["snyk", "npm audit", "safety"]
    code_security: ["bandit", "semgrep"]
    dependency_scanning: ["dependency-check"]

  performance_tools:
    load_testing: ["k6", "artillery"]
    profiling: ["clinic.js", "py-spy"]
    monitoring: ["lighthouse", "web-vitals"]

# Continuous improvement
continuous_improvement:
  quality_rule_evolution:
    enabled: true
    learning_sources:
      - "production_incident_analysis"
      - "developer_feedback"
      - "industry_best_practices"
      - "tool_recommendation_updates"
    
    adaptation_frequency: "monthly"
    
  threshold_optimization:
    enabled: true
    optimization_strategy: "statistical_analysis"
    factors:
      - "historical_violation_rates"
      - "correlation_with_production_issues"
      - "developer_productivity_impact"
      
# Fallback and recovery strategies  
fallback_strategies:
  validation_failure_recovery:
    - strategy: "reduced_parallelism"
      trigger: "high_conflict_rate"
      
    - strategy: "manual_validation_mode"
      trigger: "automation_failure_rate > 20%"
      
    - strategy: "simplified_quality_gates"
      trigger: "project_timeline_risk"
      
  quality_tool_failure:
    - backup_tools_priority: ["primary", "secondary", "manual_process"]
    - escalation_timeline: "15min -> 1h -> 4h"